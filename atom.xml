<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Polynomia</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-04T10:39:24.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>polynomia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MacOS 下使用 DNSmasq 和 DNScrypt 防止污染</title>
    <link href="http://yoursite.com/dns_proxy/"/>
    <id>http://yoursite.com/dns_proxy/</id>
    <published>2018-02-23T08:09:29.000Z</published>
    <updated>2018-04-04T10:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>放假回家之后，感觉家里的网络状况实在令人堪忧。好在我还是可以科学上网，直到前几天突然连不上了github，which means 无法用 ssh 连上 github。无法用<code>git push</code>连接远程仓库，也无法<code>ping</code>通github。使用<code>nslookup</code>命令查询github.com地址，得到的是错误的地址。因此怀疑是 DNS 污染的问题。</p><p>不过急着想 push 上去，为了连上远程仓库，找到了两个解决方法：</p><ul><li><p>使用<code>https</code>连接远程仓库：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 首先移除ssh连接的远程仓库</span><br><span class="line">git remote remove origin</span><br><span class="line"><span class="meta">#</span> 再连上https</span><br><span class="line">git remote add origin https://github.com/&lt;user_name&gt;/&lt;repo_name&gt;</span><br></pre></td></tr></table></figure></li><li><p>ssh via proxy<br>  使用 ssh 自带的<code>Proxycommand</code>就可以使用<code>http</code>代理连接 ssh<br>  首先使用<code>homebrew</code>安装<code>corkscrew</code></p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install corkscrew</span><br></pre></td></tr></table></figure><p>  然后配置 ssh</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure><p>  在配置中写入</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">    ProxyCommand corkscrew 127.0.0.1 1079 %h %p</span><br></pre></td></tr></table></figure></li></ul><pre><code>后面的代理地址和端口根据自己情况修改即可。</code></pre><h1 id="防止DNS污染"><a href="#防止DNS污染" class="headerlink" title="防止DNS污染"></a>防止DNS污染</h1><p>接着就进入正文了，如何防止 DNS 污染。本来我对这些是没有’洁癖’的，我的科学上网需求也仅仅是 Google 和 Youtube 。然而这次 ISP 做得实在过分。于是下定决心清理一下。</p><h2 id="DNSmasq"><a href="#DNSmasq" class="headerlink" title="DNSmasq"></a>DNSmasq</h2><p><code>DNSmasq</code>是一个小巧且方便地用于配置 DNS 和 DHCP 的工具，适用于小型网络，它提供了 DNS 功能和可选择的 DHCP 功能。使用它主要是为了让国内的网址使用国内的 DNS 解析，这样会使速度快很多。目前还不需要它的 DHCP 功能，不过默认也是关闭的，不需要担心。</p><h3 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h3><p>在 mac 下的安装很方便</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install dnsmasq</span><br></pre></td></tr></table></figure><p>接着修改配置文件，其实只要打开几个注释，设定一下监听端口即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不读取有关解析的配置文件，默认使用/etc/revolve.conf中的上游服务器地址进行解析</span></span><br><span class="line"><span class="comment"># 这里我们把地址直接写在配置文件里，所以不需要这个了</span></span><br><span class="line">no-resolv</span><br><span class="line"><span class="comment"># 不检查有关解析的配置文件更新（原因同上）</span></span><br><span class="line">no-poll</span><br><span class="line"><span class="comment"># 配置文件路径，加载dnsmasq-china-list的那两个配置文件</span></span><br><span class="line">conf-dir=/usr/<span class="built_in">local</span>/etc/dnsmasq.d</span><br><span class="line"><span class="comment"># 附加Hosts文件，可有可无，我觉得以后可能还是需要用到Hosts，就加入了这一行</span></span><br><span class="line">addn-hosts=/usr/<span class="built_in">local</span>/etc/dnsmasq.hosts</span><br><span class="line"><span class="comment"># 上游服务器设置成DNSCrypt</span></span><br><span class="line">server=127.0.0.1<span class="comment">#5353</span></span><br><span class="line"><span class="comment"># 缓存大小，默认是150，调大点应该没坏处</span></span><br><span class="line">cache-size=1500</span><br></pre></td></tr></table></figure><p><code>dnsmasq-china-list</code>的配置文件在<a href="https://github.com/felixonmars/dnsmasq-china-list" target="_blank" rel="noopener">这个项目</a>里，它维护了一份中国地区大部分网站的地址。这个列表来可以帮助DNSMasq判断应该把DNS请求发向哪里。</p><p>可以直接运行这个命令来下载到配置文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -4 --no-check-certificate -O /usr/local/etc/dnsmasq.d/accelerated-domains.china.conf https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/accelerated-domains.china.conf</span><br></pre></td></tr></table></figure><p>这样，DNSmasq 就配置完成了。</p><h2 id="DNScrypt"><a href="#DNScrypt" class="headerlink" title="DNScrypt"></a>DNScrypt</h2><p><code>DNScrypt</code>是 OpenDNS 出品的一个可以加密 DNS 请求的工具，让你的 DNS 请求能够像使用 ssl 一样加密地请求服务器，这样便从根本上杜绝了 DNS 污染问题。</p><h2 id="安装和配置-1"><a href="#安装和配置-1" class="headerlink" title="安装和配置"></a>安装和配置</h2><p>同样使用 homebrew安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install dnscrypt-proxy</span><br></pre></td></tr></table></figure><p>然后修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/etc/dnscrypt-proxy.conf</span><br></pre></td></tr></table></figure><p>这个配置文件改起来很简单，首先（跃入眼帘的是），<code>ProviderName</code>这一项。</p><p>OpenDNS 已经为我们准备好了公共 DNS，我们可以选择一个<code>ping</code>值比较小的，提供的 DNS 列表在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/opt/dnscrypt-proxy/share/dnscrypt-proxy</span><br></pre></td></tr></table></figure><p>然后打开<code>dnscrypt-resolvers.csv</code>，选择一个 DNS server 然后将第一列的名字属性填到配置文件处即可。</p><p>接着需要修改的就是配置文件中的 <code>LocalAddress</code>，根据在 <code>DNSmasq</code> 中配置的 server端口，改成相同的即可。比如在这个例子中，应该改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalAddress 127.0.0.1:5353</span><br></pre></td></tr></table></figure><p>另外，你或许需要将这一行修改为 <code>yes</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Daemonize yes</span><br></pre></td></tr></table></figure><h2 id="运行-DNSmasq-和-DNScrypt"><a href="#运行-DNSmasq-和-DNScrypt" class="headerlink" title="运行 DNSmasq 和 DNScrypt"></a>运行 DNSmasq 和 DNScrypt</h2><p>配置结束之后就可以愉快地使用了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo brew services start dnscrypt-proxy</span><br><span class="line">sudo brew services start dnsmasq</span><br></pre></td></tr></table></figure><p>记得一定要加上<code>sudo</code>！之前改配置之后没有加<code>sudo</code>就 start stop 出现了各种配置没用的情况。</p><p>还有最后一步就完成了：</p><p>在网络的高级选项中将系统的 DNS 地址改成 <code>127.0.0.1</code>。当然，你也可以使用命令行直接设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo networksetup -setdnsservers &quot;Wi-Fi&quot; 127.0.0.1</span><br></pre></td></tr></table></figure><p>如果你不放心，可以先看一下DNSmasq 和 DNScrypt有没有在工作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 dnsmasq</span></span><br><span class="line">sudo lsof -Pni UDP:53</span><br><span class="line"><span class="comment"># 查看 dnscrypt</span></span><br><span class="line">sudo lsof -Pni UDP:5353</span><br></pre></td></tr></table></figure><h1 id="自建-DNS-服务器"><a href="#自建-DNS-服务器" class="headerlink" title="自建 DNS 服务器"></a>自建 DNS 服务器</h1><p>不知道为什么，我在本地搭建好环境，使用远程DNS之后，还是会出现被污染的情况。我猜测可能是因为 OpenDNS 的目标太大了，提供的 DNS 服务器或许会成为 GFW 的目标。当然也有一个可能，是我当时没用 <code>sudo</code> 运行导致了一些奇怪的问题。不过当时实在烦躁的不行，因此直接在 VPS 上自建了一个。</p><h2 id="DNScrypt-wrapper-——-DNScrypt的服务端"><a href="#DNScrypt-wrapper-——-DNScrypt的服务端" class="headerlink" title="DNScrypt-wrapper —— DNScrypt的服务端"></a>DNScrypt-wrapper —— DNScrypt的服务端</h2><p>虽然 dnscrypt-proxy 是官方开源的,但是 server 端并没有开源出来，好在有大神 <a href="https://yechengfu.com/" target="_blank" rel="noopener">Cofyc</a> 参照 client 写了一个开源的版的 server , <a href="https://github.com/Cofyc/dnscrypt-wrapper" target="_blank" rel="noopener">dnscrypt-wrapper</a>。</p><p>所以我们只需要把它部署在 VPS 上，然后本地的 DNScrypt 配置文件改成连到自己的 VPS 上即可。</p><h3 id="DNScrypt-wrapper-的安装"><a href="#DNScrypt-wrapper-的安装" class="headerlink" title="DNScrypt-wrapper 的安装"></a>DNScrypt-wrapper 的安装</h3><p>这个安装和之前比起来要麻烦一些，因为它需要依赖 <code>libsodium</code> 和 <code>libevent2</code>。我的 VPS 的环境是 Ubuntu16.04。以下是我安装的一些包：（其实按照报错来按需安装即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br><span class="line">apt-get install libevent-dev</span><br><span class="line">apt-get install build-essential</span><br><span class="line">sudo apt-get install autoconf</span><br><span class="line">apt-get install libsodium*</span><br></pre></td></tr></table></figure><p>安装 <code>DNScrypt-wrapper</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive git://github.com/Cofyc/dnscrypt-wrapper.git</span><br><span class="line"><span class="built_in">cd</span> dnscrypt-wrapper</span><br><span class="line">make configure</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成会出现如下提示：</span></span><br><span class="line">install -d -m 755 ‘/usr/<span class="built_in">local</span>/bin’</span><br><span class="line">install -p dnscrypt-wrapper ‘/usr/<span class="built_in">local</span>/bin’</span><br></pre></td></tr></table></figure><h3 id="DNScrypt-wrapper-的使用"><a href="#DNScrypt-wrapper-的使用" class="headerlink" title="DNScrypt-wrapper 的使用"></a>DNScrypt-wrapper 的使用</h3><p>新建一个文件夹用于保存证书和密钥对，同时还需要产生一个临时的密钥来运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir dnskey</span><br><span class="line"><span class="comment"># 新建一个目录来存放证书</span></span><br><span class="line"><span class="built_in">cd</span> dnskey</span><br><span class="line">dnscrypt-wrapper --gen-provider-keypair \</span><br><span class="line">  --provider-name=2.dnscrypt-cert.&lt;yourdomain&gt; --ext-address=&lt;external server ip&gt; </span><br><span class="line"><span class="comment"># 生成提供商密钥对</span></span><br></pre></td></tr></table></figure><p><code>&lt;yourdomain&gt;</code> 就是可以随意取了，比如 2.dnscrypt-cert.ex.com，然后 <code>&lt;external server ip&gt;</code> 填 VPS 的 IP 地址。</p><p>接着就会产生一个指纹信息，这个信息就是客户端配置时候需要的 <code>provider_public_key</code></p><p>然后，我们使用命令生成有时限的加密密钥对以及生成预签名证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnscrypt-wrapper --gen-crypt-keypair --crypt-secretkey-file=1.key</span><br><span class="line">dnscrypt-wrapper --gen-cert-file --crypt-secretkey-file=1.key --provider-cert-file=1.cert</span><br></pre></td></tr></table></figure><p>使用命令来运行 dnscrypt-wrapper，用“-VV”来显示比较详细的 debug 信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dnscrypt-wrapper --resolver-address=8.8.8.8:53 --listen-address=&lt;external server ip&gt; \</span><br><span class="line">                   --provider-name=2.dnscrypt-cert.ex.com \</span><br><span class="line">                   --crypt-secretkey-file=1.key --provider-cert-file=1.cert</span><br></pre></td></tr></table></figure><p>我在这里选择是 Google 的 公共 DNS，你可以使用其它的。使用 <code>-d</code> 即可在后台运行。</p><h3 id="修改本地-DNScrypt-的配置"><a href="#修改本地-DNScrypt-的配置" class="headerlink" title="修改本地 DNScrypt 的配置"></a>修改本地 DNScrypt 的配置</h3><p>打开配置文件，然后将 <code>ResolverName</code> 一栏注释掉，在配置文件中加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProviderName    2.dnscrypt-cert.ex.com</span><br><span class="line">ProviderKey     &lt;your_key&gt;</span><br><span class="line">ResolverAddress &lt;your_add&gt;</span><br></pre></td></tr></table></figure><p>修改完之后重启 DNScrypt 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew services restart dnscrypt-proxy</span><br></pre></td></tr></table></figure><h1 id="新的变化"><a href="#新的变化" class="headerlink" title="新的变化"></a>新的变化</h1><p>在学校里突然发现也存在DNS污染的问题，于是重新启用 DNScrypt，但是用 homebrew 更新了一下，然后发现配置文件和以前不太一样了，server端也有了更方便的配置方法。因此也做了一下记录。</p><h2 id="DNScrypt-2"><a href="#DNScrypt-2" class="headerlink" title="DNScrypt 2"></a>DNScrypt 2</h2><p>新的文档在<a href="https://github.com/jedisct1/dnscrypt-proxy/wiki" target="_blank" rel="noopener">这里</a>。</p><h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h3><p>Server端已经方便了非常多，<a href="https://github.com/jedisct1/dnscrypt-proxy/wiki/How-to-setup-your-own-DNSCrypt-server-in-less-than-10-minutes" target="_blank" rel="noopener">文档</a>也讲的相当详细。只要在VPS上安装 docker，然后运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=dnscrypt-server -p 443:443/udp -p 443:443/tcp --net=host \</span><br><span class="line">jedisct1/dnscrypt-server init -N example.com -E 51.15.38.62:443</span><br></pre></td></tr></table></figure><p><strong>不要忘了将上面命令中的ip改为自己的VPS ip地址。</strong>还记得要记录运行之后打印出来的 stamp，在配置客户端的时候需要用到。</p><p>然后便可以运行以下命令使得 server 端运行并开机自启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start dnscrypt-server</span><br><span class="line">docker update --restart=unless-stopped dnscrypt-server</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>用 homebrew 安装的话，配置文件的路径是<code>/usr/local/etc</code>，打开<code>dnscrypt-proxy.toml</code>，与之前相同，将端口改为 dnsmasq 的监听端口，可以把 ipv6 的地址删掉（一般不会用到，可以按需添加。</p><p>接着将拉到文件的最底部，修改[static]字段，名字可以随便取，stamp 为之前在 server 端得到的 stamp。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[static.&apos;your_name&apos;]</span><br><span class="line">stamp = &apos;your_stamp&apos;</span><br></pre></td></tr></table></figure><p>之后将最上面的<code>server_names</code>字段里的值改为你自己刚刚取的名字。最后重启一下服务就 ok 了。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://zerotoroot.me/dns-security-post/" target="_blank" rel="noopener">Ultimate DNS Setup: How to Reduce, Secure &amp; Encrypt DNS Traffic</a></li><li><a href="https://skyline75489.github.io/post/2014-8-1_my-china-dns.html" target="_blank" rel="noopener">我(以前)的DNS解决方案</a></li><li><a href="https://www.logcg.com/archives/981.html" target="_blank" rel="noopener">编译安装 dnscrypt-wrapper 搭建防污染 DNS 服务器</a></li><li><a href="https://herowong.me/archives/build-dnscrypt-private-server.html" target="_blank" rel="noopener">搭建DNSCrypt服务器</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;p&gt;放假回家之后，感觉家里的网络状况实在令人堪忧。好在我还是可以科学上网，直到前几天突然连不上了github，which
      
    
    </summary>
    
      <category term="日常折腾" scheme="http://yoursite.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="GFW" scheme="http://yoursite.com/tags/GFW/"/>
    
  </entry>
  
</feed>
