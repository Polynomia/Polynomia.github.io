<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Notes for "Convolutional Neural Networks for Sentence Classiﬁcation"]]></title>
    <url>%2Fcnn-sen-class%2F</url>
    <content type="text"><![CDATA[Short name: CNN for Sentence ClassiﬁcationScore: 3Problem addressed / MotivationText Classification assigns one or more classes to a document according to their content. It can provide conceptual views of document collections and has important applications in the real world. Idea / Observation / Contribution Train a simple CNN with one layer of convolution on top of word vectors obtained from an unsupervised neural language model the pre-trained vectors are ‘universal’ feature extractors that can be utilized for various classiﬁcation tasks Formulation / Solver / Implementation First, we use pre-trained word vector to embed words. Then we get features by c_i = f(w \cdot X_{i:i+h-1}+b)where $f$ is a non-linear function and $h$ is the size of filter window. So we can get a feature map \textbf{c}=[c_1,c_2,\dots,c_{n-h+1}]We can use different size of filters and get numbers of features maps. We then apply a max-overtime pooling operation (Collobert et al., 2011) over the feature map and take the maximum value $\hat{c} = \text{max}(\textbf{c})$ which can get important feature and avoid length-different problem. Last is the fully connected layer with dropout and softmax output. Useful info / tips When randomly initializing words not in word2vec, we obtained slight improvements by sampling each dimension from $U[-a,a]$ where a was chosen such that the randomly initialized vectors have the same variance as the pre-trained ones. EvaluationDataset MR: Movie reviews with one sentence per review. Classiﬁcation involves detecting positive/negative reviews (Pang and Lee, 2005) SST-1: Stanford Sentiment Treebank—an extension of MR but with train/dev/test splits provided and ﬁne-grained labels (very positive, positive, neutral, negative, very negative), re-labeled by Socher et al. (2013) SST-2: Same as SST-1 but with neutral reviews removed and binary labels. Subj: Subjectivity dataset where the task is to classify a sentence as being subjective or objective (Pang and Lee, 2004) TREC: TREC question dataset—task involves classifying a question into 6 question types (whether the question is about person, location, numeric information, etc.) (Li and Roth, 2002) CR: Customer reviews of various products (cameras, MP3s etc.). Task is to predict positive/negative reviews (Hu and Liu, 2004) MPQA: Opinion polarity detection subtask of the MPQA dataset (Wiebe et al., 2005) Metrics For all datasets we use: rectiﬁed linear units, ﬁlter windows (h) of 3, 4, 5 with 100 feature maps each, dropout rate (p) of 0.5, $l_2$ constraint(s) of 3, and mini-batch size of 50. Pre-trained Word Vectors: We use the publicly available word2vec vectors that were trained on 100 billion words from Google News. Words not present in the set of pre-trained words are initialized randomly Results Even a simple model with static vectors (CNN-static) performs remarkably well, giving competitive results against the more sophisticated deep learning models that utilize complex pooling schemes (Kalchbrenner et al., 2014) or require parse trees to be computed beforehand (Socher et al., 2013). Fine-tuning the pre-trained vectors for each task gives still further improvements (CNN-non-static). ResourceSource CodeThere is the github repository of author.]]></content>
      <categories>
        <category>Study in Lab</category>
      </categories>
      <tags>
        <tag>paper reading</tag>
        <tag>nlp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes for "Dynamic Memory Networks for Visual and Textual Question Answering"]]></title>
    <url>%2Fdmnplus%2F</url>
    <content type="text"><![CDATA[Short name: DMN+Score: 4Problem addressed / Motivation The dynamic memory network (DMN), obtained high accuracy on a variety of language tasks. However, it was not shown whether the architecture achieves strong results for question answering when supporting facts are not marked during training or whether it could be applied to other modalities such as images. Idea / Observation / Contribution We propose a new input module which uses a two level encoder with a sentence reader and input fusion layer to allow for information ﬂow between sentences. For the memory, we propose a modiﬁcation to gated recurrent units (GRU) We show that the changes in the memory module that improved textual question answering also improve visual question answering. Formulation / Solver / Implementation Input Module There are the text input module and image input module. Text Input Module positional endoderf_i = \sum^{j=1}_{M}l_j \circ w_j^i M is the length of sentence and $l_j$ is a vector with structure l_{jd} = (1-j/M)-(d/D)(1-2j/M) Input fusion layer(bi-directional GRU) \overrightarrow{f_{i}}=GRU_{fwd}(f_{i},\overrightarrow{f_{i-1}})\overleftarrow{f_{i}}=GRU_{fwd}(f_{i},\overleftarrow{f_{i-1}})\overleftrightarrow{f_{i}}=\overrightarrow{f_{i}}+\overleftarrow{f_{i}} Input Module for VQA Utilize VGG19 Model for extract image features We ﬁrst rescale the input image to 448 × 448 and take the output from the last pooling layer which has dimensionality d = 512 × 14 × 14. The pooling layer divides the image into a grid of 14 × 14, resulting in 196 local regional vectors of d = 512. The Episodic Memory Module First, calculate the attention gate $g_t^i$ Then there are two attention methods Soft attention Just calculate the weighted sum. However the main disadvantage to soft attention is that the summation process loses both positional and ordering information. Attention based GRU h_i = g_i^t\circ \hat{h_i} +(1-g_i^t)\circ h_i-1 To produce the contextual vector $c^t$ used for updating the episodic memory state $m^t$ , we use the ﬁnal hidden state of the attention based GRU. Episode Memory Updatesm^t = ReLU(W^t[m^{t-1};c^t;q]+b) Useful info / tips $m^0 = q$ EvaluationDataset bAbI-10k DAQUAR-ALL visual dataset The Visual Question Answering (VQA) dataset Metrics Adam Optimizer Xavier Initializer for word embedding in Text QA Random uniform initializer for weights in VQA Results Outperforms baseline and other state-of-the-art methods across all question domains (All) in both test-dev and test-std, and especially for Other questions, achieves a wide margin compared to the other architectures, which is likely as the small image patches allow for ﬁnely detailed reasoning over the image. The Number questions may be not solvable for both the SAN and DMN architectures, potentially as counting objects is not a simple task when an object crosses image patch boundaries. ResourceProject pageThere is a web app for DMN+. Source codeThere is the tensorflow implementation of DMN+. Dataset bAbI DAQUAR-ALL VQA Other paper reading notesnot yet completed]]></content>
      <categories>
        <category>Study in Lab</category>
      </categories>
      <tags>
        <tag>paper reading</tag>
        <tag>visual question answering</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS 下使用 DNSmasq 和 DNScrypt 防止污染]]></title>
    <url>%2Fdns_proxy%2F</url>
    <content type="text"><![CDATA[Intro放假回家之后，感觉家里的网络状况实在令人堪忧。好在我还是可以科学上网，直到前几天突然连不上了github，which means 无法用 ssh 连上 github。无法用git push连接远程仓库，也无法ping通github。使用nslookup命令查询github.com地址，得到的是错误的地址。因此怀疑是 DNS 污染的问题。 不过急着想 push 上去，为了连上远程仓库，找到了两个解决方法： 使用https连接远程仓库： 1234# 首先移除ssh连接的远程仓库git remote remove origin# 再连上httpsgit remote add origin https://github.com/&lt;user_name&gt;/&lt;repo_name&gt; ssh via proxy 使用 ssh 自带的Proxycommand就可以使用http代理连接 ssh 首先使用homebrew安装corkscrew 1brew install corkscrew 然后配置 ssh 1vim ~/.ssh/config 在配置中写入 12Host * ProxyCommand corkscrew 127.0.0.1 1079 %h %p 后面的代理地址和端口根据自己情况修改即可。 防止DNS污染接着就进入正文了，如何防止 DNS 污染。本来我对这些是没有’洁癖’的，我的科学上网需求也仅仅是 Google 和 Youtube 。然而这次 ISP 做得实在过分。于是下定决心清理一下。 DNSmasqDNSmasq是一个小巧且方便地用于配置 DNS 和 DHCP 的工具，适用于小型网络，它提供了 DNS 功能和可选择的 DHCP 功能。使用它主要是为了让国内的网址使用国内的 DNS 解析，这样会使速度快很多。目前还不需要它的 DHCP 功能，不过默认也是关闭的，不需要担心。 安装和配置在 mac 下的安装很方便 1brew install dnsmasq 接着修改配置文件，其实只要打开几个注释，设定一下监听端口即可： 12345678910111213# 不读取有关解析的配置文件，默认使用/etc/revolve.conf中的上游服务器地址进行解析# 这里我们把地址直接写在配置文件里，所以不需要这个了no-resolv# 不检查有关解析的配置文件更新（原因同上）no-poll# 配置文件路径，加载dnsmasq-china-list的那两个配置文件conf-dir=/usr/local/etc/dnsmasq.d# 附加Hosts文件，可有可无，我觉得以后可能还是需要用到Hosts，就加入了这一行addn-hosts=/usr/local/etc/dnsmasq.hosts# 上游服务器设置成DNSCryptserver=127.0.0.1#5353# 缓存大小，默认是150，调大点应该没坏处cache-size=1500 dnsmasq-china-list的配置文件在这个项目里，它维护了一份中国地区大部分网站的地址。这个列表来可以帮助DNSMasq判断应该把DNS请求发向哪里。 可以直接运行这个命令来下载到配置文件夹： 1wget -4 --no-check-certificate -O /usr/local/etc/dnsmasq.d/accelerated-domains.china.conf https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/accelerated-domains.china.conf 这样，DNSmasq 就配置完成了。 DNScryptDNScrypt是 OpenDNS 出品的一个可以加密 DNS 请求的工具，让你的 DNS 请求能够像使用 ssl 一样加密地请求服务器，这样便从根本上杜绝了 DNS 污染问题。 安装和配置同样使用 homebrew安装： 1brew install dnscrypt-proxy 然后修改配置文件： 1vim /usr/local/etc/dnscrypt-proxy.conf 这个配置文件改起来很简单，首先（跃入眼帘的是），ProviderName这一项。 OpenDNS 已经为我们准备好了公共 DNS，我们可以选择一个ping值比较小的，提供的 DNS 列表在： 1cd /usr/local/opt/dnscrypt-proxy/share/dnscrypt-proxy 然后打开dnscrypt-resolvers.csv，选择一个 DNS server 然后将第一列的名字属性填到配置文件处即可。 接着需要修改的就是配置文件中的 LocalAddress，根据在 DNSmasq 中配置的 server端口，改成相同的即可。比如在这个例子中，应该改为： 1LocalAddress 127.0.0.1:5353 另外，你或许需要将这一行修改为 yes： 1Daemonize yes 运行 DNSmasq 和 DNScrypt配置结束之后就可以愉快地使用了。 12sudo brew services start dnscrypt-proxysudo brew services start dnsmasq 记得一定要加上sudo！之前改配置之后没有加sudo就 start stop 出现了各种配置没用的情况。 还有最后一步就完成了： 在网络的高级选项中将系统的 DNS 地址改成 127.0.0.1。当然，你也可以使用命令行直接设置： 1sudo networksetup -setdnsservers &quot;Wi-Fi&quot; 127.0.0.1 如果你不放心，可以先看一下DNSmasq 和 DNScrypt有没有在工作： 1234# 查看 dnsmasqsudo lsof -Pni UDP:53# 查看 dnscryptsudo lsof -Pni UDP:5353 自建 DNS 服务器不知道为什么，我在本地搭建好环境，使用远程DNS之后，还是会出现被污染的情况。我猜测可能是因为 OpenDNS 的目标太大了，提供的 DNS 服务器或许会成为 GFW 的目标。当然也有一个可能，是我当时没用 sudo 运行导致了一些奇怪的问题。不过当时实在烦躁的不行，因此直接在 VPS 上自建了一个。 DNScrypt-wrapper —— DNScrypt的服务端虽然 dnscrypt-proxy 是官方开源的,但是 server 端并没有开源出来，好在有大神 Cofyc 参照 client 写了一个开源的版的 server , dnscrypt-wrapper。 所以我们只需要把它部署在 VPS 上，然后本地的 DNScrypt 配置文件改成连到自己的 VPS 上即可。 DNScrypt-wrapper 的安装这个安装和之前比起来要麻烦一些，因为它需要依赖 libsodium 和 libevent2。我的 VPS 的环境是 Ubuntu16.04。以下是我安装的一些包：（其实按照报错来按需安装即可） 12345apt-get update &amp;&amp; apt-get upgradeapt-get install libevent-devapt-get install build-essentialsudo apt-get install autoconfapt-get install libsodium* 安装 DNScrypt-wrapper: 12345678910git clone --recursive git://github.com/Cofyc/dnscrypt-wrapper.gitcd dnscrypt-wrappermake configure./configuremakemake install# 安装完成会出现如下提示：install -d -m 755 ‘/usr/local/bin’install -p dnscrypt-wrapper ‘/usr/local/bin’ DNScrypt-wrapper 的使用新建一个文件夹用于保存证书和密钥对，同时还需要产生一个临时的密钥来运行。 1234567cd ~mkdir dnskey# 新建一个目录来存放证书cd dnskeydnscrypt-wrapper --gen-provider-keypair \ --provider-name=2.dnscrypt-cert.&lt;yourdomain&gt; --ext-address=&lt;external server ip&gt; # 生成提供商密钥对 &lt;yourdomain&gt; 就是可以随意取了，比如 2.dnscrypt-cert.ex.com，然后 &lt;external server ip&gt; 填 VPS 的 IP 地址。 接着就会产生一个指纹信息，这个信息就是客户端配置时候需要的 provider_public_key 然后，我们使用命令生成有时限的加密密钥对以及生成预签名证书： 12dnscrypt-wrapper --gen-crypt-keypair --crypt-secretkey-file=1.keydnscrypt-wrapper --gen-cert-file --crypt-secretkey-file=1.key --provider-cert-file=1.cert 使用命令来运行 dnscrypt-wrapper，用“-VV”来显示比较详细的 debug 信息： 123dnscrypt-wrapper --resolver-address=8.8.8.8:53 --listen-address=&lt;external server ip&gt; \ --provider-name=2.dnscrypt-cert.ex.com \ --crypt-secretkey-file=1.key --provider-cert-file=1.cert 我在这里选择是 Google 的 公共 DNS，你可以使用其它的。使用 -d 即可在后台运行。 修改本地 DNScrypt 的配置打开配置文件，然后将 ResolverName 一栏注释掉，在配置文件中加入: 123ProviderName 2.dnscrypt-cert.ex.comProviderKey &lt;your_key&gt;ResolverAddress &lt;your_add&gt; 修改完之后重启 DNScrypt 即可。 1sudo brew services restart dnscrypt-proxy 新的变化在学校里突然发现也存在DNS污染的问题，于是重新启用 DNScrypt，但是用 homebrew 更新了一下，然后发现配置文件和以前不太一样了，server端也有了更方便的配置方法。因此也做了一下记录。 DNScrypt 2新的文档在这里。 Server端Server端已经方便了非常多，文档也讲的相当详细。只要在VPS上安装 docker，然后运行以下命令： 12docker run --name=dnscrypt-server -p 443:443/udp -p 443:443/tcp --net=host \jedisct1/dnscrypt-server init -N example.com -E 51.15.38.62:443 不要忘了将上面命令中的ip改为自己的VPS ip地址。还记得要记录运行之后打印出来的 stamp，在配置客户端的时候需要用到。 然后便可以运行以下命令使得 server 端运行并开机自启动。 12docker start dnscrypt-serverdocker update --restart=unless-stopped dnscrypt-server 客户端用 homebrew 安装的话，配置文件的路径是/usr/local/etc，打开dnscrypt-proxy.toml，与之前相同，将端口改为 dnsmasq 的监听端口，可以把 ipv6 的地址删掉（一般不会用到，可以按需添加。 接着将拉到文件的最底部，修改[static]字段，名字可以随便取，stamp 为之前在 server 端得到的 stamp。 12[static.&apos;your_name&apos;]stamp = &apos;your_stamp&apos; 之后将最上面的server_names字段里的值改为你自己刚刚取的名字。最后重启一下服务就 ok 了。 参考链接 Ultimate DNS Setup: How to Reduce, Secure &amp; Encrypt DNS Traffic 我(以前)的DNS解决方案 编译安装 dnscrypt-wrapper 搭建防污染 DNS 服务器 搭建DNSCrypt服务器]]></content>
      <categories>
        <category>日常折腾</category>
      </categories>
      <tags>
        <tag>GFW</tag>
      </tags>
  </entry>
</search>
